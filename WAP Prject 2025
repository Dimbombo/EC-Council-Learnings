#Run Juice-Shop
sudo docker run -p 3000:3000 bkimminich/juice-shop

#Use sqlmap for simulate the SQL-Injection 
#Figure X — SQLi test case against /rest/products/search (1.2).
sqlmap -u "http://localhost:3000/rest/products/search?q=apple" --level=5 --risk=3 --batch --dump 
#performs high-coverage SQLi checks on parameter q. 
#(Before mitigations) the tool can enumerate the DBMS and attempt to dump data, evidencing the vulnerability prior to hardening.

#Awesome—here’s a minimal, copy-pasteable hardening stack you can put in front of your Juice Shop container to generate the exact screenshots you need for 1.3 (Figures 10–13). 
#It uses NGINX as a reverse proxy to (a) block common injection/XSS patterns, (b) enforce CSRF defenses (SameSite + Origin/Referer checks), 
#(c) add rate-limiting on the login route, and (d) set secure headers & cookie flags. You’ll validate each control with a one-line curl, your existing sqlmap, and your hydra command.
#You already have Juice Shop running on localhost:3000. The commands below proxy it through http://localhost:8080
#with protections applied.

#0) One-time setup
# Create a working folder for the reverse proxy
mkdir -p ~/juice-hardening && cd ~/juice-hardening

#Create nginx.conf (paste everything below)CREATING NGINX.CONF:
#BEGIN--------------------------------------------------------------------
worker_processes 1;
events { worker_connections 1024; }

http {
  limit_req_zone $binary_remote_addr zone=login_zone:10m rate=10r/m;

  map $arg_q $block_injection {
    default 0;
    ~*(union.*select|sleep\(|benchmark\(|or\s+1=1|\'\s*or\s*\'|--|/\*|\*/|<script|onerror=|onload=|javascript:) 1;
  }

  map $query_string $deny_injection {
    default 0;
    ~*(union.*select|sleep\(|benchmark\(|or\s+1=1|\'\s*or\s*\'|--|/\*|\*/|<script|onerror=|onload=|javascript:) 1;
  }

  map $http_origin $bad_origin {
    default 1;
    "~^http://localhost(:8080)?$" 0;
    "" 0;
  }
  map $http_referer $bad_referer {
    default 1;
    "~^http://localhost(:8080)?/" 0;
    "" 0;
  }

  upstream juice_upstream { server host.docker.internal:3000; } 

  server {
    listen 8080;
    server_name localhost;

    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=()" always;

    add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; img-src 'self' data:;" always;

    proxy_cookie_path / "/; Secure; HttpOnly; SameSite=Strict";

    if ($deny_injection) { return 403; }

    if ($request_method ~* (POST|PUT|PATCH|DELETE)) {
      if ($bad_origin) { return 403; }
      if ($bad_referer) { return 403; }
    }

    location = /rest/user/login {
      limit_req zone=login_zone burst=20 nodelay;
      proxy_pass http://juice_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location / {
    
      if ($block_injection) { return 403; }

      proxy_pass http://juice_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
  }
}


END---------------------------------------------------------
Linux users (Dockerized NGINX): host.docker.internal works on recent Docker. If it doesn’t, replace with your host IP (e.g., 172.17.0.1) or run NGINX directly on the host.

1) Run the hardened proxy
Option A — Run NGINX on the host (simple)
sudo apt-get update && sudo apt-get install -y nginx
# Backup default and use our config
sudo mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak
sudo cp ~/juice-hardening/nginx.conf /etc/nginx/nginx.conf
sudo nginx -t
sudo systemctl restart nginx
# Proxy now on http://localhost:8080


Option B — Run NGINX in Docker
docker run -d --name juice-nginx \
  -p 8080:8080 \
  -v ~/juice-hardening/nginx.conf:/etc/nginx/nginx.conf:ro \
  --add-host=host.docker.internal:host-gateway \
  nginx:stable
# Proxy now on http://localhost:8080


2) Validations & screenshots (Figures 10–13)
#Figure 10 — Input validation & sanitization (block obvious SQLi/XSS)
#XSS probe (blocked 403):
curl -i "http://localhost:8080/rest/products/search?q=1' or 1=1 --"
Expected: HTTP/1.1 403 Forbidden.



#Re-run your sqlmap against the PROTECTED port (should fail/slow):
sqlmap -u "http://localhost:8080/rest/products/search?q=apple" --level=5 --risk=3 --batch --dump
#Expected: heuristic detection hits a wall / requests receive 403, no dump.
#Take terminal screenshot(s) showing 403s → Figure 10.




